Ju1iusWebpackAssetsBundle
=========================

This bundle provides lightweight integration for
`webpack <webpack.github.io>`_ and `webpack-dev-server <http://webpack.github.io/docs/webpack-dev-server.html>`_
into Symfony2.

It relies on the
`assets-webpack-plugin <https://www.npmjs.com/package/assets-webpack-plugin>`_
to expose assets compiled by webpack to your symfony application.


Installation
------------

You first need to have nodejs and npm installed.

Then install the minimal required javascript dependencies

.. code:: bash
  
  cd /path/to/your/symfony-project
  npm instal -g webpack webpack-dev-server
  npm install --save-dev webpack assets-webpack-plugin

Install the bundle with composer:

.. code:: bash

  composer require ju1ius/webpack-assets-bundle
  
  
Register the bundle in your AppKernel:

.. code:: php

  // app/AppKernel.php
  public function registerBundles () {
    $bundles = array(
      //...
      new ju1ius\WebpackAssetsBundle\Ju1iusWebpackAssetsBundle(),
      //...
    );
  }

  
Bundle configuration
--------------------

Configure the bundle in your app/config/config.yml:

.. code:: yaml

  ju1ius_webpack_assets:
    # Path to the JSON file generated by assets-webpack-plugin
    # This MUST match the path given in your webpack configuration.
    # The default value matches assets-webpack-plugin default one.
    revision_manifest: %kernel.root_dir%/../webpack-assets.json

          
Configuring webpack
-------------------

Let's say your assets are stored in app/Resources/assets, and must be compiled under web/assets.
You have two javascript entry points 'front' and 'admin'.

::

  + app
  |---+ Resources
  |   \---+ assets
  |       \---+ js
  |           |---- front.js  --> your 'front' entry point
  |           \---- admin.js  --> your 'admin' entry point
  + web
  \---+ assets
      \---+ js
          |---- front_810a6266f06bfdc9647a.js  --> desired compiled ouput for your 'front' entry point
          \---- admin_810a6266f06bfdc9647a.js  --> desired compiled ouput for your 'admin' entry point

Create the following webpack.config.js in your project root:

.. code:: javascript

  // webpack.config.js
  var path = require("path");
  var webpack = require("webpack");
  var AssetsPlugin = require("assets-webpack-plugin");

  module.exports = {
    entry: {
      front: [
        "app/Resources/assets/js/front.js"
      ],
      admin: [
        "app/Resources/assets/js/admin.js"
      ]
    },
    output: {
      path: path.join(__dirname, "web", "assets"),
      publicPath: "/assets",
      filename: "js/[name]_[hash].js"
    },
    plugins: [
      // Path to the JSON file generated by assets-webpack-plugin
      // This MUST match the path in the bundle configuration
      new AssetsPlugin({
        path: "app/Resources/assets",
        filename: "rev-manifest.json"
      })
    ]
  };

And update your app/config/config.yml

.. code:: yaml
    
  ju1ius_webpack_assets:
    revision_manifest: %kernel.root_dir%/Resources/assets/rev-manifest.json
  
Run webpack

.. code:: bash

  webpack --config webpack.config.js

You can now reference the "front" entry in your twig templates by calling the webpack_asset function:

.. code:: twig

  <script src="{{ webpack_asset('front') }}"></script>
  <script src="{{ webpack_asset('admin') }}"></script>

Or if you use the PHP template engine:

.. code:: php

  <script src="<?php echo $view['webpack_assets']->getUrl('front') ?>"></script>
  <script src="<?php echo $view['webpack_assets']->getUrl('admin') ?>"></script>
  
  
Using webpack-dev-server
------------------------

You must update your webpack configuration to use the webpack-dev-server base url in the output public path.

.. code:: javascript

  //webpack.config.js

  var SERVER_URL = 'http://localhost:8080';
  module.exports = {
    //...
    output: {
      path: path.join(__dirname, "web", "assets"),
      publicPath: SERVER_URL + "/assets",
      filename: "js/[name]_[hash].js"
    },
    //...
  };

Run the server:

.. code:: bash

  webpack-dev-server --inline --config webpack.config.js --content-base ./web
  

Bonus step: adding css support
------------------------------

Install `css-loader <https://www.npmjs.com/package/css-loader>`_
and `extract-text-webpack-plugin <https://www.npmjs.com/package/extract-text-webpack-plugin>`_

.. code:: bash

  npm install --save-dev css-loader extract-text-webpack-plugin

Let's modify our webpack.config.js:

.. code:: javascript

  var webpack = require("webpack");
  var AssetsPlugin = require("assets-webpack-plugin");
  var ExtractTextPlugin = require("extract-text-webpack-plugin");

  module.exports = {
    entry: {
      front: [
        "app/Resources/assets/js/front.js",
        "app/resources/assets/css/front.css"
      ]
    },
    output: {
      path: "web/assets",
      publicPath: "/assets",
      filename: "js/[name]_[hash].js"
    },
    module: {
      loaders: [
        {
            test: /\.css$/,
            loader: ExtractTextPlugin.extract("css-loader")
        }
      ]
    },
    //...
    plugins: [
      new AssetsPlugin({
        path: "app/Resources/assets",
        filename: "rev-manifest.json"
      }),
      new ExtractTextPlugin("css/[name]_[contenthash].css")
    ]
  };
  

You can now reference the stylesheet in your templates (notice the second argument passed to the webpack_asset function),
with twig:
  
.. code:: twig

  <link rel="stylesheet" href="{{ webpack_asset('front', 'css') }}" />

or in php:

.. code:: php

  <link rel="stylesheet" href="<?php echo $view['webpack_assets']->getUrl('front', 'css') ?>" />
